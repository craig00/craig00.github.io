<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[PWA 架构介绍 [译]]]></title>
      <url>https://craig00.github.io/2018/10/09/%5B%E8%AF%91%5D%20PWA%20%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://developers.google.com/web/ilt/pwa/introduction-to-progressive-web-app-architectures" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<p>渐进式 Web Apps （ PWA ）使用现代 Web 功能提供快速、具有用户粘性和可靠的移动网络体验，这对于用户和企业来说都是十分有益的。</p>
<p>这份文档描述了一些架构和技术，这些内容可以让你的应用支持离线可用、后台同步和推送通知。这些功能原本都是本地应用才能有的体验。</p>
<h1 id="service-worker-和-application-shell-造就的瞬间加载"><a href="#service-worker-和-application-shell-造就的瞬间加载" class="headerlink" title="service worker 和 application shell 造就的瞬间加载"></a>service worker 和 application shell 造就的瞬间加载</h1><p>PWA 融合了很多本地应用和 Web 的优点。PWA 从浏览器标签下的页面发展为沉浸式应用，仅仅是用了普通的 HTML 和 Javascript，并且进一步增强，为用户提供了一流的类似本地应用的体验。</p>
<p>即使用户离线或者网络不可靠的情况下，PWA 也能提供快速体验。另外，PWA 有很大潜力去融合之前只属于本地应用的功能，比如推送消息。开发一个离线可用且性能优异的 Web 应用主要依靠 service worker 和客户端存储 API （例如，Cache Storage API 或 IndexedDB ） 的混合使用。</p>
<p><strong>service woker</strong> ：得益于 service worker 可以使用缓存和存储 API ，所以 PWA 可以预缓存一部分 Web 应用的数据，从而在用户下次开启时可以快速加载。使用 service worker 可以让你的 Web 应用拦截或处理网络请求，包括管理各种缓存，最小化数据传输，和保存用户离线操作的数据直至重新上线。这样的缓存机制可以让开发者集中关注速度，使得本地应用上常见的瞬时加载和定期更新同样出现在 PWA 上。如果你不熟悉 service worker，请阅读之前的文章。</p>
<p>service worker 不需要用户操作，不需要在打开的页面中也能执行自身的功能。这就催生出了新服务，比如推送消息或离线采集用户操作然后上线再发送。（这不太可能使你的应用程序膨胀，因为浏览器会根据需要启动和停止 service worker 来管理内存）</p>
<p>service worker 提供的服务如下：</p>
<ul>
<li><p>拦截 HTTP/HTTPS 请求，因此你的应用可以从缓存、本地存储或网络中做出决定来提供什么样的服务。</p>
<p>service worker 不能接触 DOM 但是它可以使用 Cache Storage API，使用 Fetch API 来发送网络请求，使用 IndexedDB API 来做持久化存储。除去拦截网络请求，service worker 还可以使用 <code>postMessage()</code> 来和其他 service worker 和它控制的页面进行通信。（例如要求更新 DOM ）  </p>
</li>
<li><p>从服务器接受推送消息</p>
<p>service worker 独立运行于其他 Web 应用之外，并提供底层操作系统的钩子。它能响应来自操作系统的事件，包括推送消息。</p>
</li>
<li><p>让用户在离线情况下依然可以使用 PWA 应用，直到浏览器恢复网络才执行一系列用户的操作。（这也就是后台同步）</p>
<p>将 service worker 想象成应用的管家，被需要的时候就会醒过来，然后执行任务。实际上，service worker 是浏览器的后台事件处理程序。service worker 的生命周期比较短。它只会在接收到事件的时候醒来，然后只运行必要的时间去处理这个事件。</p>
</li>
</ul>
<p>缓存的概念是令人兴奋的，因为这可以让用户体验离线操作，而且给了开发者足够的控制权去控制什么是真正的离线体验。但是，为了充分发挥 service worker 的优点并融入越来越多的 PWA 功能，是需要一个新思路，即利用 application shell 的架构来创建 Web 站点。</p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> translation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> translation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Fetch [译]]]></title>
      <url>https://craig00.github.io/2018/10/06/%5B%E8%AF%91%5D%20%E4%BD%BF%E7%94%A8Fetch/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<h1 id="fetch-是什么"><a href="#fetch-是什么" class="headerlink" title="fetch 是什么"></a>fetch 是什么</h1><p>Fetch API 是一个简单的获取资源的接口。比起以前的 XMLHttpRequest 经常需要额外的逻辑处理（例如处理重定向），Fetch 使得发起网络请求和处理响应变得更简单。<br><a id="more"></a></p>
<blockquote>
<p>注意：Fetch 支持 CORS。测试工作通常需要跑在本地服务器上。注意到 fetch 并不需要 https，但是 service worker 是需要的，所以在 service worker 中使用 fetch 是需要 https 的。而本地服务器测试的时候是可以免除这个的。</p>
</blockquote>
<p>可以在 window 接口中检查浏览器是否支持 fetch。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="string">'fetch'</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Fetch API not found, try including the polyfill'</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// We can safely use fetch from now on</span></span><br></pre></td></tr></table></figure></p>
<p>这有个 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">ployfill</a> 适用于还不支持 fetch 的浏览器（注意 readme 中的注意事项）。</p>
<h1 id="发出请求"><a href="#发出请求" class="headerlink" title="发出请求"></a>发出请求</h1><p>下面是一个简单的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">fetch(<span class="string">'examples/example.json'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do stuff with the response</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Looks like there was a problem: \n'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>我们将想要获取的资源路径作为一个参数传递给了 fetch。在这个例子里是 <strong>examples/example.json</strong> 。fetch 调用返回一个解析为响应对象的 promise。</p>
<p>但 promise 成功返回时，响应值会传递给 <code>.then</code>。这正是响应值会被使用的地方。如果请求没有完成，promise 会被 <code>.catch</code> 接管并传递相应的错误。</p>
<p>响应对象代表了每个请求对应的响应内容。它包含了请求的资源、丰富的属性和方法等。例如，<code>response.ok</code>，<code>response.status</code>，和 <code>response.statusText</code> 都可以被用来评定响应的状态。</p>
<p>评定响应的成功对于使用 fetch 来说是十分重要的，因为失败的响应（如404）也会被当做成功返回。fetch 只有在请求无法完成时才会返回一个失败的 promise。前述的代码片段只会在没有网络连接的情况下才会进入 <code>.catch</code>，失败的响应（如404）则不会进入。如果为了校验响应更新代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">fetch(<span class="string">'examples/example.json'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Do stuff with the response</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Looks like there was a problem: \n'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在如果响应对象的 <code>ok</code> 属性是 false （状态码不是 200 - 299），这里的处理函数会抛出一个带有 <code>response.statusText</code> 的错误，从而触发代码块 <code>.catch</code> 。这可以防止失败的响应沿着 fetch 链继续传播。</p>
<h1 id="读取响应对象"><a href="#读取响应对象" class="headerlink" title="读取响应对象"></a>读取响应对象</h1><p>一定要读取响应对象来获取响应内容。响应对象正好有对应的方法。例如，<code>Response.json()</code> 读取响应并返回一个成功解析为 JSON 的 promise。将这一步的代码加入上述例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">fetch(<span class="string">'examples/example.json'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Read the response as json.</span></span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">responseAsJson</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do stuff with the JSON</span></span><br><span class="line">  <span class="built_in">console</span>.log(responseAsJson);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Looks like there was a problem: \n'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果将功能抽象成函数，那将更加简洁，便于理解。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logResult</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Looks like there was a problem: \n'</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateResponse</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readResponseAsJSON</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchJSON</span>(<span class="params">pathToResource</span>) </span>&#123;</span><br><span class="line">  fetch(pathToResource) <span class="comment">// 1</span></span><br><span class="line">  .then(validateResponse) <span class="comment">// 2</span></span><br><span class="line">  .then(readResponseAsJSON) <span class="comment">// 3</span></span><br><span class="line">  .then(logResult) <span class="comment">// 4</span></span><br><span class="line">  .catch(logError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchJSON(<span class="string">'examples/example.json'</span>);</span><br></pre></td></tr></table></figure>
<p>这段代码的意义如下：</p>
<ol>
<li>Fetch 获取的资源是 <strong>examples/example.json</strong> 。Fetch 返回一个成功解析为响应对象的 promise。响应结果成功返回时会被传递给 <code>validateResponse</code>。</li>
<li><code>validateResponse</code> 检查响应是否有效。如果不是，则会抛出一个错误，这将跳过剩余的 <code>then</code> ，直接触发 <code>catch</code>。这是非常重要的。没有这个校验的话，失败的响应会被传递下去，这可能导致后续依赖于正确响应结果的代码出错。如果响应结果正确，那么它将会传递给 <code>readResponseAsJSON</code>。</li>
<li><code>readResponseAsJSON</code> 使用 <code>Response.json()</code> 获取响应内容。这个方法返回一个成功解析为 JSON 的 promise。一旦这个 promise 状态变为成功，那么 JSON 数据就会被传递给 <code>logResult</code>。（如果 promise 失败了会怎样呢？）</li>
<li>最后，来自于 <strong>examples/example.json</strong> 的 JSON 数据被 <code>logResult</code> 记录下来。</li>
</ol>
<blockquote>
<p>注意：你也可以使用响应对象的 <code>status</code> 属性来处理任意一种网络状态码。这可以让你对不同的错误类型定制不同的页面，或者处理一些不成功（200 - 299）但是仍然可用（300 范围内的状态）的响应。查看 <a href="https://developers.google.com/web/ilt/pwa/caching-files-with-service-worker#generic-fallback" target="_blank" rel="noopener">使用 service worker 缓存文件</a> 获取使用 404 自定义页面的内容。</p>
</blockquote>
<p>更多信息请查看：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" target="_blank" rel="noopener">Response interface</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/json" target="_blank" rel="noopener">Response.json()</a></li>
<li><a href="https://developers.google.com/web/ilt/pwa/working-with-promises#chaining" target="_blank" rel="noopener">Promise chaining</a></li>
</ul>
<h2 id="例子：获取图片"><a href="#例子：获取图片" class="headerlink" title="例子：获取图片"></a>例子：获取图片</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readResponseAsBlob</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response.blob();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showImage</span>(<span class="params">responseAsBlob</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Assuming the DOM has a div with id 'container'</span></span><br><span class="line">  <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line">  <span class="keyword">var</span> imgElem = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  container.appendChild(imgElem);</span><br><span class="line">  <span class="keyword">var</span> imgUrl = URL.createObjectURL(responseAsBlob);</span><br><span class="line">  imgElem.src = imgUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchImage</span>(<span class="params">pathToResource</span>) </span>&#123;</span><br><span class="line">  fetch(pathToResource)</span><br><span class="line">  .then(validateResponse)</span><br><span class="line">  .then(readResponseAsBlob)</span><br><span class="line">  .then(showImage)</span><br><span class="line">  .catch(logError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchImage(<span class="string">'examples/kitten.jpg'</span>);</span><br></pre></td></tr></table></figure>
<p>在这个例子中，获取的图片是 <strong>examples/kitten.jpg</strong> 。在上述例子中，<code>validateResponse</code> 是用来校验响应的。响应被读取为 Blob 对象（而不是 JSON ）。然后创建了一个图片元素并添加到了页面中，图片的 <code>src</code> 属性被设置为一个 URL 来代表这个 Blob。</p>
<blockquote>
<p>注意：URL 对象的方法 <code>createObjectURL()</code> 是用来产生一个 URL 以替代 Blob。这是非常重要的，因为你不能直接将图片的源数据设置为 Blob。Blob 对象必须转化成 URL。</p>
</blockquote>
<p>更多信息请查看：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">Blobs</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/blob" target="_blank" rel="noopener">Response.blob()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" target="_blank" rel="noopener">URL object</a></li>
</ul>
<h2 id="例子：获取文本"><a href="#例子：获取文本" class="headerlink" title="例子：获取文本"></a>例子：获取文本</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readResponseAsText</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response.text();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showText</span>(<span class="params">responseAsText</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Assuming the DOM has a div with id 'message'</span></span><br><span class="line">  <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span><br><span class="line">  message.textContent = responseAsText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchText</span>(<span class="params">pathToResource</span>) </span>&#123;</span><br><span class="line">  fetch(pathToResource)</span><br><span class="line">  .then(validateResponse)</span><br><span class="line">  .then(readResponseAsText)</span><br><span class="line">  .then(showText)</span><br><span class="line">  .catch(logError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchText(<span class="string">'examples/words.txt'</span>);</span><br></pre></td></tr></table></figure>
<p>在这个例子中，获取的文本是 <strong>examples/words.txt</strong> 。在上述例子中，<code>validateResponse</code> 是用来校验响应的。响应内容被处理成文本，然后加入到网页中。</p>
<blockquote>
<p>注意：或许可以传输 HTML 代码，然后使用 <code>innerHTML</code> 属性将代码插入文档中，不过这种处理方式需要格外小心，因为这可能导致你的网站陷入跨站脚本攻击的危险中。</p>
</blockquote>
<p>更多信息请查看：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Body/text" target="_blank" rel="noopener">Response.text()</a></li>
</ul>
<blockquote>
<p>注意：考虑到完整性，上面使用到的方法其实是 Body（ Fetch API mixin，在响应对象中实现了）的方法。</p>
</blockquote>
<h1 id="自定义请求"><a href="#自定义请求" class="headerlink" title="自定义请求"></a>自定义请求</h1><p><code>fetch()</code> 也可以接受第二个可选的参数，<code>init</code>，这个参数可以让你创建一个自定义的请求，例如请求方法，缓存模式和证书等等。</p>
<h2 id="例子：HEAD-请求"><a href="#例子：HEAD-请求" class="headerlink" title="例子：HEAD 请求"></a>例子：HEAD 请求</h2><p>fetch 默认使用 get 请求来获取特定资源，但是其他 http 请求方法也是可以被使用。</p>
<p>HEAD 请求和 get 类似，不过响应体的内容是空的。当你想要文件的元数据时，你可以使用此类请求，并且你希望或需要传输文件的数据。</p>
<p>如果想要在 fetch 使用 HEAD 请求，例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'examples/words.txt'</span>, &#123;</span><br><span class="line">  method: <span class="string">'HEAD'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>上述代码会对 <strong>examples/words.txt</strong> 发出一个 HEAD 请求。你可以使用 HEAD 请求来检查资源大小。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSize</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> size = response.headers.get(<span class="string">'content-length'</span>);</span><br><span class="line">  <span class="comment">// Do stuff based on response size</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">headRequest</span>(<span class="params">pathToResource</span>) </span>&#123;</span><br><span class="line">  fetch(pathToResource, &#123;</span><br><span class="line">    method: <span class="string">'HEAD'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(validateResponse)</span><br><span class="line">  .then(checkSize)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  .catch(logError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headRequest(<span class="string">'examples/words.txt'</span>);</span><br></pre></td></tr></table></figure></p>
<p>HEAD 请求在这里被用于请求一个资源的大小（ header 中的 <strong>content-length</strong> )，在不用加载资源的情况下完成这个操作。在实践中这经常用来决定是否加载全部的资源（甚至是如何去发起请求）。</p>
<h2 id="例子：POST-请求"><a href="#例子：POST-请求" class="headerlink" title="例子：POST 请求"></a>例子：POST 请求</h2><p>Fetch 同样可以使用 POST 请求。下面的代码将给 <strong>someurl/comment</strong> 发送字段 “title” 和 “message” （都是字符串）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'someurl/comment'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="string">'title=hello&amp;message=world'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：在生产环境中，总是记得去加密敏感的用户信息。</p>
</blockquote>
<p>这个方法再次使用了 <code>init</code> 参数。这也是设置请求体的地方，代表了需要发送的内容（上例中是 title 和 message ）。</p>
<p>请求体的内容也可以从表单中使用 FormData 接口提取出来。例如，上述代码可以更新为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assuming an HTML &lt;form&gt; with id of 'myForm'</span></span><br><span class="line">fetch(<span class="string">'someurl/comment'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="keyword">new</span> FormData(<span class="built_in">document</span>.getElementById(<span class="string">'myForm'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="自定义-header"><a href="#自定义-header" class="headerlink" title="自定义 header"></a>自定义 header</h2><p><code>init</code> 参数可以使用 Headers 接口来对 HTTP 请求和响应头执行各种操作，包括检索，设置，添加和删除它们。在前一小节中已经展示了如何读取响应头。下述代码将描述如何创建一个自定义的 Headers 并在 fetch 中使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>,</span><br><span class="line">  <span class="string">'X-Custom-Header'</span>: <span class="string">'hello world'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">'/someurl'</span>, &#123;</span><br><span class="line">  headers: myHeaders</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在这里，我们创建了一个 Headers 对象，其中 <code>Content-Type</code> 的值为 <code>text/plain</code>，自定义 <code>X-Custom-Header</code> 值为 <code>hello world</code>。</p>
<blockquote>
<p>注意：只有部分头部，类似 <strong>Content-Type</strong> 是可以被修改的。而其他的，比如 <strong>Content-Length</strong> 和 <strong>Origin</strong> 是被保护的，不能被修改。</p>
</blockquote>
<p>在跨域请求上的自定义头部是需要资源服务器支持的。这个例子中服务器需要配置成接受 <code>X-Custom-Header</code> 来使得 fetch 成功。当一个自定义的头部被设置的时候，浏览器会执行一个预检操作。这也就是说，浏览器一开始会给服务器发送一个 <code>OPTIONS</code> 请求，以查看浏览器允许哪些 HTTP 方法和头部。如果服务器被配置成接受原始请求的方法和头部，那么请求可以被发送。否则会报错。</p>
<p>更多信息请查看：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers" target="_blank" rel="noopener">Headers</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request" target="_blank" rel="noopener">Preflight checks</a></li>
</ul>
<h1 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h1><p>Fetch 和 XMLHttpRequest 都只是支持同源策略。这就意味着浏览器限制了脚本中的跨域请求。当一个域名（例如 <strong><a href="http://foo.com/" target="_blank" rel="noopener">http://foo.com/</a></strong> )向另一个不同的域名（例如： <strong><a href="http://bar.com/" target="_blank" rel="noopener">http://bar.com/</a></strong> ）发起资源请求时，跨域就发生了。这是一个简单的跨域例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From http://foo.com/</span></span><br><span class="line">fetch(<span class="string">'http://bar.com/data.json'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something with response</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：跨域请求限制总是让人困惑。很多资源比如图片、样式表和 js 脚本都是通过跨域获取的。然而，这些是同源策略的例外。跨域请求在脚本内部还是被限制的。</p>
</blockquote>
<p>一直以来都有突破同源策略的方法（如 JSONP ）。跨域资源共享（ CORS ）机制是获取跨域资源的标准方法。CORS 机制可以让你在请求中说明你想要的是一个跨域的资源（ fetch 是默认开启的）。浏览器会给请求加上一个 header <code>Origin</code> ，然后去请求合适的资源。只有当服务器返回 <code>Access-Control-Allow-Origin</code> header 时，浏览器才能做出响应，即此时浏览器有权访问这个资源。在实践中，期望大量第三方（如第三方 APIs ）使用他们资源的服务器会对 <code>Access-Control-Allow-Origin</code> 设置一个通配符，从而让任何人都可以请求那个资源。</p>
<p>如果你请求的服务器不支持 CORS ，那么在浏览器的控制台应该可以看到一个错误。这个错误提示说跨域请求被阻止，因为 CORS 的 <code>Access-Control-Allow-Origin</code> header 缺失。</p>
<p>你可以使用 <code>no-cors</code> 模式来请求不透明的资源。不透明响应不能被 JavaScript 利用，但是依然可以被 service worker 处理和缓存。在 fetch 中使用 <code>no-cors</code> 模式是相对简单的。上述例子更新一下 <code>no-cors</code> 的用法就是如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From http://foo.com/</span></span><br><span class="line">fetch(<span class="string">'http://bar.com/data.json'</span>, &#123;</span><br><span class="line">  mode: <span class="string">'no-cors'</span> <span class="comment">// 'cors' by default</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something with response</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>更多信息请查看：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">Cross Origin Resource Sharing</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> translation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> translation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Service Workers 介绍 [译]]]></title>
      <url>https://craig00.github.io/2018/09/30/%5B%E8%AF%91%5D%20Service%20Workers%20%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://developers.google.com/web/ilt/pwa/introduction-to-service-worker" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<h1 id="什么是-service-worker"><a href="#什么是-service-worker" class="headerlink" title="什么是 service worker"></a>什么是 service worker</h1><p>service worker 是 web worker 的一种。它本质上是一个 javaScript 文件独立运行于浏览器主线程之外，可以拦截网络请求，可以在缓存中缓存或取回资源，还可以分发推送消息。</p>
<p>因为 workers 独立运行于主线程之外，所以 service workers 和与它相关联的应用是互相独立的。因此有如下结果：</p>
<ul>
<li>因为 service worker 不是同步的（它被设计成异步的），所以 <code>localStorage</code> 在 service worker 中不能被使用。</li>
<li>service worker 可以在 app 不是活跃状态下接收来自服务器的推送消息。这个特性甚至可以让你的 app 在没有被浏览器打开的情况下，向用户展示推送通知。</li>
<li>service worker 不能直接接触 DOM。如果需要和页面进行通信，那么 service worker 可以使用 <code>postMessage()</code> 来发送数据，另外通过监听 “message” 事件来接收数据。<a id="more"></a>
<blockquote>
<p>注意：当浏览器没有运行的时候，通知消息是否被接收取决于浏览器和操作系统的交互方式。比如在桌面操作系统中，Chrome 和 Firefox 只有在浏览器打开的时候才能接收通知消息。然而，Android 是被设计成在接收推送消息时可以唤醒浏览器，并且总是接收推送消息，无论浏览器是什么状态。在<a href="https://web-push-book.gauntface.com/" target="_blank" rel="noopener">这本书</a>的 <a href="https://web-push-book.gauntface.com/chapter-07/01-faq/#why-doesnt-push-work-when-the-browser-is-closed" target="_blank" rel="noopener">FAQ</a> 中可以查看更多信息。</p>
</blockquote>
</li>
</ul>
<p>使用 service worker 需要注意以下内容：</p>
<ul>
<li>service worker 是一个可编程的网络代理，能够控制网页中的网络请求是如何被处理的。</li>
<li>service worker 只运行在 https 中。因为 service worker 可以拦截网络请求和修改应答，所以中间人攻击很难实施。</li>
<li>service worker 在不工作的时候会停下来，然后在需要的时候重新开始工作。在此过程中，你不能依靠全局变量来保存状态信息。如果你有这个需求，推荐使用 IndexedDB 数据库。</li>
<li>service worker 广泛使用了 promises，如果你对 promises 不熟悉的话，推荐阅读 <a href="https://developers.google.com/web/fundamentals/primers/promises" target="_blank" rel="noopener">Promises, an introduction.</a></li>
</ul>
<h1 id="service-worker-能做什么"><a href="#service-worker-能做什么" class="headerlink" title="service worker 能做什么"></a>service worker 能做什么</h1><p>service worker 使得 apps 可以控制网络请求，缓存请求结果来改进性能并且提供了缓存资源的离线访问方式。</p>
<p>service worker 利用两个 API 使得一个应用可以被离线使用：Fetch （网络请求资源的标准实现）和 Cache （应用数据的持久化存储）。Cache 是持久化的，并且与浏览器缓存和网络状态不相关。</p>
<h2 id="为应用-站点改进性能"><a href="#为应用-站点改进性能" class="headerlink" title="为应用/站点改进性能"></a>为应用/站点改进性能</h2><p>缓存资源将使得内容在大多数网络条件下加载更快。在<a href="https://developers.google.com/web/ilt/pwa/lab-caching-files-with-service-worker" target="_blank" rel="noopener">Caching files with the service</a> 和 <a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/" target="_blank" rel="noopener">The offline cookbook</a> 查看更多内容。</p>
<h2 id="离线可用优先"><a href="#离线可用优先" class="headerlink" title="离线可用优先"></a>离线可用优先</h2><p>在 service worker 中使用 Fetch API，我们可以拦截网络请求，也可以使用请求资源之外的内容来修改响应。我们使用这项技术可以保证用户离线的情况下依然可以使用服务。</p>
<h2 id="高级功能的基础"><a href="#高级功能的基础" class="headerlink" title="高级功能的基础"></a>高级功能的基础</h2><p>service worker 是其他功能的基础，由此才得以让 web app 像原生应用一样工作。部分高级功能如下：</p>
<ul>
<li>Notifications API： 使用操作系统本地的通知系统向用户展示通知并进行交互。</li>
<li>Push API：这个 API 使得你的应用可以订阅推送服务和接收推送消息。推送消息会由 Service Worker 处理，可以用来更新本地状态，也可以用来展示系统通知。由于 Service Worker 的运行不依赖于应用本身，所以它可以在浏览器没有运行的时候接收消息通知。</li>
<li>Background Sync API：这个 API 可以在用户网络条件不好的时候收集用户需要发送的内容，然后等到网络条件良好的时候再发送。这个 API 还可以接收服务器的定时更新，从而使得应用可以在下次打开时进行更新操作。</li>
<li>Channel Messaging API：这个 API 让 Web Worker、Service Worker 和主应用可以互相传递消息。这个 API 可以用于新内容通知和软件更新等与用户有交互的操作。</li>
</ul>
<h1 id="service-worker-生命周期"><a href="#service-worker-生命周期" class="headerlink" title="service worker 生命周期"></a>service worker 生命周期</h1><p>service worker 在它的生命周期内会经历以下3步：</p>
<ul>
<li>注册</li>
<li>安装</li>
<li>激活</li>
</ul>
<h2 id="注册和作用域"><a href="#注册和作用域" class="headerlink" title="注册和作用域"></a>注册和作用域</h2><p>在 <strong>安装</strong> 一个 service worker 之前，你需要在你的代码中进行 <strong>注册</strong> 。注册的生命周期是告诉浏览器 Service Worker 位于何处，然后在后台开始安装。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Registration successful, scope is:'</span>, registration.scope);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Service worker registration failed, error:'</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码开始处对 <code>navigator.serviceWorker</code> 进行了浏览器支持性检测。然后使用 <code>navigator.serviceWorker.register</code> 进行了注册，如果注册成功，那么将返回一个 resolve 状态的 promise。service worker 的 <code>scope</code> 记录在 <code>registration.scope</code>。</p>
<p><code>scope</code> 代表 service worker 可以控制哪些文件，也就是说，service worker 可以控制哪些路径下的网络请求。默认路径是 service worker 文件所在的位置，以及其中所包含的所有路径。所以 <strong>service-worker.js</strong> 如果在根目录下，那么 service worker 可以控制这个域下的所有请求。</p>
<p>另外，还可以通过传递一个参数来指定，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>, &#123;</span><br><span class="line">  scope: <span class="string">'/app/'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在这个例子中，service worker 的作用域被设置为 <code>/app/</code>，所以这就意味着 service worker 可以控制请求来自 <code>/app/</code>，<code>/app/lower/</code> 或 <code>/app/lower/lower</code>，但是来自更高级别的目录则不行，如<code>/app</code> 或 <code>/</code>。</p>
<p>如果 service worker 已经被注册了，那么 <code>navigator.serviceWorker.register</code> 返回当前活跃的 service worker 注册对象。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一旦浏览器注册了一个 service worker，那么 <strong>安装</strong> 工作将会开始，只要 service worker 被浏览器认为是新的，即当前站点没有安装过 service worker，或新旧 service worker 之间有任何一字节的不同。</p>
<p>安装一个 service worker 会触发 <code>install</code> 事件。在 service worker 安装过程中可以通过 <code>install</code> 的事件监听器来开展一些额外的工作。例如，在安装过程中，service worker 可以预缓存 web app 的一部分内容，从而在用户下次打开的时候可以快速响应。所以在首次加载后，重复加载的资源的响应速度会很快，用户体验会变得更好。示例代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-worker.js</span></span><br><span class="line"><span class="comment">// Listen for install event, set callback</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Perform some task</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>一旦 service worker 成功安装，那么将进入 <strong>激活</strong> 阶段。如果有些页面是被旧的 service worker 控制，那么新的 service worker 会进入 <code>waiting</code> 状态。新的 service worker 只有等到没有页面被旧的 service worker 控制的时候才会被激活。这保证了任何时候只有一个版本的 service worker 在运行。</p>
<blockquote>
<p>注意：简单地刷新页面是不足以将控制权转交给新的 service worker，因为在卸载当前页面之前，新页面会被请求，所以任何时间内旧的 service worker 都在被使用中。</p>
</blockquote>
<p>当新 service worker 激活的时候，<code>activate</code> 事件会被触发。可以利用这个事件来清理过期的缓存。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-worker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform some task</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>一旦激活，service worker 会控制其作用域下的所有页面，并且开始监听这些页面的事件。然而，在激活之前加载的页面将不会受新的 service worker 的控制。新的 service worker 只有在关闭或重启应用，或调用 <code>clients.claim()</code> 才能掌握控制权。在此之前，这些页面的请求都将不会被新的 service worker 拦截。这其实是一种方法来保证站点前后统一。</p>
<h1 id="service-worker-事件"><a href="#service-worker-事件" class="headerlink" title="service worker 事件"></a>service worker 事件</h1><p>service worker 是事件驱动的。安装和激活的时候会分别触发 <code>install</code> 和 <code>activate</code> 事件，此外还有其他事件 Service Worker 也能进行响应，比如 <code>fetch</code>、<code>push</code>、<code>sync</code> 和 <code>message</code> 等，其中 <code>message</code> 是 service worker 用来和其他脚本通信用的。</p>
<p>要想检查 service worker，可以在浏览器的开发者工具中查看。这个过程由于各浏览器的实现不同而可能有所差异。更多信息可查看<a href="https://developers.google.com/web/ilt/pwa/tools-for-pwa-developers/" target="_blank" rel="noopener">工具使用链接</a></p>
<h1 id="深入阅读"><a href="#深入阅读" class="headerlink" title="深入阅读"></a>深入阅读</h1><ul>
<li>service worker <a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/lifecycle" target="_blank" rel="noopener">生命周期的详细介绍</a></li>
<li>service worker <a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/registration" target="_blank" rel="noopener">注册</a></li>
<li><a href="https://developers.google.com/web/ilt/pwa/lab-scripting-the-service-worker" target="_blank" rel="noopener">Create your own service worker</a></li>
<li><a href="https://developers.google.com/web/ilt/pwa/lab-offline-quickstart" target="_blank" rel="noopener">Take a blog site offline</a></li>
<li><a href="https://developers.google.com/web/ilt/pwa/lab-caching-files-with-service-worker" target="_blank" rel="noopener">Cache files with Service Worker</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> translation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> translation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[algorithm---3]]></title>
      <url>https://craig00.github.io/2017/07/06/algorithm3/</url>
      <content type="html"><![CDATA[<h3 id="字符串的字典序全排列"><a href="#字符串的字典序全排列" class="headerlink" title="字符串的字典序全排列"></a>字符串的字典序全排列</h3><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。 （可能有字符重复）</p>
<p>Array.sort方法重新理解：传入的比较函数有点纯函数的意味—compareFunction(a, b) must always return the same value when given a specific pair of elements a and b as its two arguments.</p>
<p>另外sort是根据返回的结果result进行排序，如果result&lt;0，就升序，result&gt;0，就降序，result==0就按默认的规则排序。</p>
<p>所以这一题的思路没什么特殊，就是取全排列然后再排序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Permutation</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = str.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> cc = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="comment">// arr.sort((a,b)=&gt; a.charCodeAt(0) - b.charCodeAt(0));</span></span><br><span class="line">    recurse(cc, arr, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> [...cc].sort();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recurse</span>(<span class="params">cc, arr, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == arr.length) &#123;</span><br><span class="line">        cc.add(arr.join(<span class="string">""</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = num; i &lt; arr.length; i++) &#123;</span><br><span class="line">        [arr[i], arr[num]] = [arr[num], arr[i]];</span><br><span class="line">        recurse(cc, arr, num + <span class="number">1</span>);</span><br><span class="line">        [arr[i], arr[num]] = [arr[num], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大子段和问题"><a href="#最大子段和问题" class="headerlink" title="最大子段和问题"></a>最大子段和问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum, a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            a = a + arr[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum === <span class="literal">undefined</span>) &#123;<span class="comment">//原来初始化为0，没有考虑开始就是负数的情况。牛客的test case只过了83%</span></span><br><span class="line">            sum = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; sum) &#123;</span><br><span class="line">            sum = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[algorithm---2]]></title>
      <url>https://craig00.github.io/2017/06/27/algorithm2/</url>
      <content type="html"><![CDATA[<h4 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h4><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p>
<p>题目里的特殊指针指向的任意节点，依然是这条链上的节点。这一点居然没搞明白！</p>
<p>所以思路就是先把所有节点复制一遍，并插入源节点之后，形成链表，然后处理random节点（需要结合前面说的），最后拆分一下，拆出一条也是OK滴。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*function RandomListNode(x)&#123;</span></span><br><span class="line"><span class="comment">    this.label = x;</span></span><br><span class="line"><span class="comment">    this.next = null;</span></span><br><span class="line"><span class="comment">    this.random = null;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clone</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!pHead) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> current = pHead;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> RandomListNode(current.label);</span><br><span class="line">        node.next = current.next;</span><br><span class="line">        current.next = node;</span><br><span class="line">        current = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    current = pHead;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        node = current.next;</span><br><span class="line">        <span class="keyword">if</span> (current.random) &#123;</span><br><span class="line">            node.random = current.random.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> copyHead = pHead.next;</span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">    current = pHead;</span><br><span class="line">    <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        temp = current.next;</span><br><span class="line">        current.next = temp.next;</span><br><span class="line">        current = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copyHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h4><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>
<p>核心思路是利用中序遍历，中序遍历正好符合排序要求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* function TreeNode(x) &#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.left = null;</span></span><br><span class="line"><span class="comment">    this.right = null;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">//非递归版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(!pRootOfTree) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> pre;</span><br><span class="line">    <span class="keyword">let</span> node = pRootOfTree;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span> || stack.length != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> pop = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">0</span>) &#123;</span><br><span class="line">            start++;</span><br><span class="line">            root = pop;</span><br><span class="line">            pre = pop;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre.right = pop;</span><br><span class="line">            pop.left = pre;</span><br><span class="line">            pre = pop;</span><br><span class="line">        &#125;</span><br><span class="line">        node = pop.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!pRootOfTree) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//不依靠外部变量</span></span><br><span class="line">    <span class="keyword">if</span> (pRootOfTree.left == <span class="literal">null</span> &amp;&amp; pRootOfTree.right == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> pRootOfTree;</span><br><span class="line">    <span class="keyword">let</span> left = Convert(pRootOfTree.left); <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">let</span> p = left;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p.right != <span class="literal">null</span>) &#123;<span class="comment">//取到左子树的最大值</span></span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">        p.right = pRootOfTree;</span><br><span class="line">        pRootOfTree.left = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> right = Convert(pRootOfTree.right);</span><br><span class="line">    <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">        right.left = pRootOfTree;</span><br><span class="line">        pRootOfTree.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left != <span class="literal">null</span> ? left : pRootOfTree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单递归版</span></span><br><span class="line"><span class="comment">//依赖外部变量</span></span><br><span class="line"><span class="keyword">let</span> leftN = <span class="literal">null</span>,rightN = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!pRootOfTree) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    Convert(pRootOfTree.left);</span><br><span class="line">    <span class="keyword">if</span> (rightN == <span class="literal">null</span>) &#123;</span><br><span class="line">        leftN = rightN = pRootOfTree;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rightN.right = pRootOfTree;</span><br><span class="line">        pRootOfTree.left = rightN;</span><br><span class="line">        rightN = pRootOfTree;</span><br><span class="line">    &#125;</span><br><span class="line">    Convert(pRootOfTree.right);</span><br><span class="line">    <span class="keyword">return</span> leftN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[algorithm---1]]></title>
      <url>https://craig00.github.io/2017/05/07/algorithm/</url>
      <content type="html"><![CDATA[<h3 id="主定理（MasterTheorem）"><a href="#主定理（MasterTheorem）" class="headerlink" title="主定理（MasterTheorem）"></a>主定理（MasterTheorem）</h3><p>设a≥1，b&gt;1为常数，f(n) 为函数，T(n) 为非负整数，且T(n) = aT(n/b) + f(n) 则有以下结果：<br><img src="http://omoi0oliz.bkt.clouddn.com/algorithm.png" alt="主定理"></p>
<h3 id="找出n个数中第K大的数"><a href="#找出n个数中第K大的数" class="headerlink" title="找出n个数中第K大的数"></a>找出n个数中第K大的数</h3><p>采用类似快速排序算法的思想求解，从数组中随机选择一个数x，将数组分为两部分，一部分都小于x，另一部分都大于等于x.这个数x所在的位置正好是n-K的话，则返回这个数x，不然就继续找。</p>
<p>以下是java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> re = findHelp(a, i, j);</span><br><span class="line">        <span class="keyword">int</span> temp = a[re];</span><br><span class="line">        a[re] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">        <span class="keyword">while</span> ((n - re) != K) &#123;</span><br><span class="line">            <span class="keyword">if</span> (K &gt; (n - re)) &#123;</span><br><span class="line">                j = re - <span class="number">1</span>;</span><br><span class="line">                re = findHelp(a, i, j);</span><br><span class="line">                temp = a[re];</span><br><span class="line">                a[re] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = re + <span class="number">1</span>;</span><br><span class="line">                re = findHelp(a, i, j);</span><br><span class="line">                temp = a[re];</span><br><span class="line">                a[re] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a[re];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findHelp</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">return</span> j;</span><br><span class="line">        <span class="keyword">int</span> cc = a[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt; cc) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= cc) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以下是javascript代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findKth</span>(<span class="params">array, K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = array.length;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">    j = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> re = findHelp(array, i, j);</span><br><span class="line">  [array[i], array[re]] = [array[re], array[i]];</span><br><span class="line">  <span class="keyword">while</span> ((n - re) != K) &#123;</span><br><span class="line">    <span class="keyword">if</span> (K &gt; (n - re)) &#123;</span><br><span class="line">      j = re - <span class="number">1</span>;</span><br><span class="line">      re = findHelp(array, i, j);</span><br><span class="line">      [array[i], array[re]] = [array[re], array[i]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i = re + <span class="number">1</span>;</span><br><span class="line">      re = findHelp(array, i, j);</span><br><span class="line">      [array[i], array[re]] = [array[re], array[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array[re];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findHelp</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= j) <span class="keyword">return</span> j;</span><br><span class="line">    <span class="keyword">let</span> cc = arr[i];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; cc) &#123;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= cc) &#123;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>根据这个算法的过程可以得到如下等式</p>
<blockquote>
<p>T(n) = T(n/2) + O(n)</p>
</blockquote>
<p>根据主定理可知，T(n) = O(n).</p>
<p>同样也可以利用堆排序来做，虽然时间复杂度会是O(nlogK);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找出第K大的数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findKth</span>(<span class="params">array, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cc = array.slice(<span class="number">0</span>, K);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排成一个小顶堆,这里是自底向上</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">parseInt</span>((cc.length - <span class="number">2</span>) / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        adjustHeap(cc, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = K; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; cc[<span class="number">0</span>]) &#123;</span><br><span class="line">            cc[<span class="number">0</span>] = array[i];</span><br><span class="line">            adjustHeap(cc, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(cc[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整堆，从上往下</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">adjustHeap</span>(<span class="params">arr, j</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = j; i &lt;= <span class="built_in">parseInt</span>((arr.length - <span class="number">2</span>) / <span class="number">2</span>); i = min) &#123;</span><br><span class="line">            min = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[<span class="number">2</span> * i + <span class="number">2</span>] &amp;&amp; arr[<span class="number">2</span> * i + <span class="number">2</span>] &lt; arr[<span class="number">2</span> * i + <span class="number">1</span>]) &#123;</span><br><span class="line">                min = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[min]) &#123;</span><br><span class="line">                [arr[i], arr[min]] = [arr[min], arr[i]];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包和匿名函数]]></title>
      <url>https://craig00.github.io/2017/04/26/%E9%97%AD%E5%8C%85%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>匿名函数和闭包在js中是不一样的，匿名函数一般是没有名字的函数，而闭包是指有权访问另一个函数作用域中的变量的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counting=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;   </span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">autoPlus</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">        <span class="built_in">console</span>.log(count++);   </span><br><span class="line">    &#125;   </span><br><span class="line">	<span class="keyword">return</span> autoPlus;   </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>上述代码是一个典型的闭包，但是js中作用域链是这样的：内层函数中的变量没有声明，那么它就会沿着作用域链一级一级向上搜索变量名，直至全局变量window对象定义的变量，所以这里autoPlus函数能够访问外层函数的count变量并不是因为闭包。</p>
<p>而闭包的特点在于它引用了外部函数的变量，则外部函数的变量就不会被销毁，直到闭包被销毁。一般匿名函数执行后，其内包含的变量和作用域链都是会被销毁的，但是如上述代码，count就没有被销毁。</p>
<p>深入浅出node中指出，实现外部作用域访问内部作用域中变量的方法叫做闭包，这得益于高阶函数的特性：函数可以作为参数或者返回值。示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> local = <span class="string">'local'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> local;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> baz = bar();</span><br><span class="line">  <span class="built_in">console</span>.log(baz());</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">//local</span></span><br></pre></td></tr></table></figure>
<p>this 对象是在运行时基于函数的执行环境绑定的：在全局函数中， this 等于 window，而当函数被作为某个对象的方法调用时， this 等于那个对象。不过，匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。</p>
<pre><code class="javascript"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;
<span class="keyword">var</span> object = {
    name : <span class="string">"My Object"</span>,
    getNameFunc : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
            <span class="keyword">return</span> <span class="keyword">this</span>.name;
        };
    }
};
</code></pre>
<pre><code class="javascript">alert(object.getNameFunc()()); <span class="comment">//"The Window"（在非严格模式下）</span>
<span class="keyword">var</span> name = <span class="string">"The Window"</span>;
<span class="keyword">var</span> object = {
    name : <span class="string">"My Object"</span>,
    getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">return</span> <span class="keyword">this</span>.name;
    }
};
object.getName(); <span class="comment">//"My Object"</span>
(object.getName)(); <span class="comment">//"My Object"</span>
(object.getName = object.getName)(); <span class="comment">//"The Window"，在非严格模式下</span>
<span class="comment">//第三行代码先执行了一条赋值语句，然后再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以 this 的值不能得到维持，结果就返回了"The Window"。</span>
</code></pre>
<pre><code class="javascript"><span class="keyword">var</span> a = {
  print: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="built_in">console</span>.log(<span class="keyword">this</span>);
  }
}
a.print() <span class="comment">// this is a because a is to the left of the dot</span>
<span class="keyword">var</span> b = a.print;
b() <span class="comment">// this is window, because there is nothing to the left of the dot</span>
</code></pre>
<p>匿名函数中的this为什么会指向全局对象呢？其实就是嵌套太多（匿名函数中return匿名函数），或者类似于上面的例子（把匿名函数通过赋值的方式赋给了全局对象），所以到最后把匿名函数的执行环境给了全局对象。</p>
<p>而箭头函数的this总是指向词法作用域，也就是外层调用者obj，不会有上述问题。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://craig00.github.io/2017/02/28/hello-world/</url>
      <content type="html"><![CDATA[<p>用hexo在github上搭建个人博客，本来挺简单，但是不动手试试就永远不知道自己到底会在什么地方犯糊涂。</p>
<h3 id="安装nodejs和git"><a href="#安装nodejs和git" class="headerlink" title="安装nodejs和git"></a>安装nodejs和git</h3><p>上官网下载最新版，配置一下环境变量即可。（程序员基本技能）<br>在github官网上创建一个repository，名称比较特殊，必须是yourname.github.io不然就会失败。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>打开git bash，在合适的文件夹目录中执行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p>
<p>在浏览器上成功访问localhost:4000的话，那就说明hexo安装成功了。然而我就碰到了一个问题，浏览器一直在转圈圈，没有任何页面显示。这个问题是因为电脑上装了福昕阅读器，端口冲突了。设置其他端口进行访问即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 4001</span><br></pre></td></tr></table></figure></p>
<h3 id="更换hexo主题"><a href="#更换hexo主题" class="headerlink" title="更换hexo主题"></a>更换hexo主题</h3><p>都说next主题好看，所以跟风尝试了下。首先去github下载对应的主题包，直接git命令行下载实在太慢了，解压缩后放到themes文件夹内，修改文件名为next。在blog_config.yml中找到‘theme’，更改其值为next。这个文件的格式要求很严厉，好像不能随便缩进，而且键值对中间的冒号后面必须跟着空格。以下命令是清除静态资源，重新生成静态资源，启动服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p>
<h3 id="部署hexo发布到github"><a href="#部署hexo发布到github" class="headerlink" title="部署hexo发布到github"></a>部署hexo发布到github</h3><p>首先可以是同步代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git init  </span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"init"</span> </span><br><span class="line">$ git remote add origin 项目的github地址 </span><br><span class="line">$ git pull origin master  </span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></p>
<p>在blog_config.yml中找到deploy，增加一点内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/craig00/craig00.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>然后下载安装一个扩展，执行hexo d命令即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
