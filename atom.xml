<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Craig&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://craig00.github.io/"/>
  <updated>2018-10-06T11:30:56.805Z</updated>
  <id>https://craig00.github.io/</id>
  
  <author>
    <name>Craig Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Fetch [译]</title>
    <link href="https://craig00.github.io/2018/10/06/%5B%E8%AF%91%5D%20%E4%BD%BF%E7%94%A8Fetch/"/>
    <id>https://craig00.github.io/2018/10/06/[译] 使用Fetch/</id>
    <published>2018-10-06T10:01:02.000Z</published>
    <updated>2018-10-06T11:30:56.805Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api" target="_blank" rel="noopener">原文链接</a></p></blockquote><img src="/2018/10/06/[译]%20使用Fetch/High-Sierra.jpg" title="This is an example image"><h1 id="fetch-是什么"><a href="#fetch-是什么" class="headerlink" title="fetch 是什么"></a>fetch 是什么</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="translation" scheme="https://craig00.github.io/categories/translation/"/>
    
    
      <category term="translation" scheme="https://craig00.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>Service Workers 介绍 [译]</title>
    <link href="https://craig00.github.io/2018/09/30/%5B%E8%AF%91%5D%20Service%20Workers%20%E4%BB%8B%E7%BB%8D/"/>
    <id>https://craig00.github.io/2018/09/30/[译] Service Workers 介绍/</id>
    <published>2018-09-30T08:31:58.000Z</published>
    <updated>2018-09-30T11:32:25.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://developers.google.com/web/ilt/pwa/introduction-to-service-worker" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="什么是-service-worker"><a href="#什么是-service-worker" class="headerlink" title="什么是 service worker"></a>什么是 service worker</h1><p>service worker 是 web worker 的一种。它本质上是一个 javaScript 文件独立运行于浏览器主线程之外，可以拦截网络请求，可以在缓存中缓存或取回资源，还可以分发推送消息。</p><p>因为 workers 独立运行于主线程之外，所以 service workers 和与它相关联的应用是互相独立的。因此有如下结果：</p><ul><li>因为 service worker 不是同步的（它被设计成异步的），所以 <code>localStorage</code> 在 service worker 中不能被使用。</li><li>service worker 可以在 app 不是活跃状态下接收来自服务器的推送消息。这个特性甚至可以让你的 app 在没有被浏览器打开的情况下，向用户展示推送通知。</li><li>service worker 不能直接接触 DOM。如果需要和页面进行通信，那么 service worker 可以使用 <code>postMessage()</code> 来发送数据，另外通过监听 “message” 事件来接收数据。<a id="more"></a><blockquote><p>注意：当浏览器没有运行的时候，通知消息是否被接收取决于浏览器和操作系统的交互方式。比如在桌面操作系统中，Chrome 和 Firefox 只有在浏览器打开的时候才能接收通知消息。然而，Android 是被设计成在接收推送消息时可以唤醒浏览器，并且总是接收推送消息，无论浏览器是什么状态。在<a href="https://web-push-book.gauntface.com/" target="_blank" rel="noopener">这本书</a>的 <a href="https://web-push-book.gauntface.com/chapter-07/01-faq/#why-doesnt-push-work-when-the-browser-is-closed" target="_blank" rel="noopener">FAQ</a> 中可以查看更多信息。</p></blockquote></li></ul><p>使用 service worker 需要注意以下内容：</p><ul><li>service worker 是一个可编程的网络代理，能够控制网页中的网络请求是如何被处理的。</li><li>service worker 只运行在 https 中。因为 service worker 可以拦截网络请求和修改应答，所以中间人攻击很难实施。</li><li>service worker 在不工作的时候会停下来，然后在需要的时候重新开始工作。在此过程中，你不能依靠全局变量来保存状态信息。如果你有这个需求，推荐使用 IndexedDB 数据库。</li><li>service worker 广泛使用了 promises，如果你对 promises 不熟悉的话，推荐阅读 <a href="https://developers.google.com/web/fundamentals/primers/promises" target="_blank" rel="noopener">Promises, an introduction.</a></li></ul><h1 id="service-worker-能做什么"><a href="#service-worker-能做什么" class="headerlink" title="service worker 能做什么"></a>service worker 能做什么</h1><p>service worker 使得 apps 可以控制网络请求，缓存请求结果来改进性能并且提供了缓存资源的离线访问方式。</p><p>service worker 利用两个 API 使得一个应用可以被离线使用：Fetch （网络请求资源的标准实现）和 Cache （应用数据的持久化存储）。Cache 是持久化的，并且与浏览器缓存和网络状态不相关。</p><h2 id="为应用-站点改进性能"><a href="#为应用-站点改进性能" class="headerlink" title="为应用/站点改进性能"></a>为应用/站点改进性能</h2><p>缓存资源将使得内容在大多数网络条件下加载更快。在<a href="https://developers.google.com/web/ilt/pwa/lab-caching-files-with-service-worker" target="_blank" rel="noopener">Caching files with the service</a> 和 <a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/" target="_blank" rel="noopener">The offline cookbook</a> 查看更多内容。</p><h2 id="离线可用优先"><a href="#离线可用优先" class="headerlink" title="离线可用优先"></a>离线可用优先</h2><p>在 service worker 中使用 Fetch API，我们可以拦截网络请求，也可以使用请求资源之外的内容来修改响应。我们使用这项技术可以保证用户离线的情况下依然可以使用服务。</p><h2 id="高级功能的基础"><a href="#高级功能的基础" class="headerlink" title="高级功能的基础"></a>高级功能的基础</h2><p>service worker 是其他功能的基础，由此才得以让 web app 像原生应用一样工作。部分高级功能如下：</p><ul><li>Notifications API： 使用操作系统本地的通知系统向用户展示通知并进行交互。</li><li>Push API：这个 API 使得你的应用可以订阅推送服务和接收推送消息。推送消息会由 Service Worker 处理，可以用来更新本地状态，也可以用来展示系统通知。由于 Service Worker 的运行不依赖于应用本身，所以它可以在浏览器没有运行的时候接收消息通知。</li><li>Background Sync API：这个 API 可以在用户网络条件不好的时候收集用户需要发送的内容，然后等到网络条件良好的时候再发送。这个 API 还可以接收服务器的定时更新，从而使得应用可以在下次打开时进行更新操作。</li><li>Channel Messaging API：这个 API 让 Web Worker、Service Worker 和主应用可以互相传递消息。这个 API 可以用于新内容通知和软件更新等与用户有交互的操作。</li></ul><h1 id="service-worker-生命周期"><a href="#service-worker-生命周期" class="headerlink" title="service worker 生命周期"></a>service worker 生命周期</h1><p>service worker 在它的生命周期内会经历以下3步：</p><ul><li>注册</li><li>安装</li><li>激活</li></ul><h2 id="注册和作用域"><a href="#注册和作用域" class="headerlink" title="注册和作用域"></a>注册和作用域</h2><p>在 <strong>安装</strong> 一个 service worker 之前，你需要在你的代码中进行 <strong>注册</strong> 。注册的生命周期是告诉浏览器 Service Worker 位于何处，然后在后台开始安装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Registration successful, scope is:'</span>, registration.scope);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Service worker registration failed, error:'</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码开始处对 <code>navigator.serviceWorker</code> 进行了浏览器支持性检测。然后使用 <code>navigator.serviceWorker.register</code> 进行了注册，如果注册成功，那么将返回一个 resolve 状态的 promise。service worker 的 <code>scope</code> 记录在 <code>registration.scope</code>。</p><p><code>scope</code> 代表 service worker 可以控制哪些文件，也就是说，service worker 可以控制哪些路径下的网络请求。默认路径是 service worker 文件所在的位置，以及其中所包含的所有路径。所以 <strong>service-worker.js</strong> 如果在根目录下，那么 service worker 可以控制这个域下的所有请求。</p><p>另外，还可以通过传递一个参数来指定，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>, &#123;</span><br><span class="line">  scope: <span class="string">'/app/'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在这个例子中，service worker 的作用域被设置为 <code>/app/</code>，所以这就意味着 service worker 可以控制请求来自 <code>/app/</code>，<code>/app/lower/</code> 或 <code>/app/lower/lower</code>，但是来自更高级别的目录则不行，如<code>/app</code> 或 <code>/</code>。</p><p>如果 service worker 已经被注册了，那么 <code>navigator.serviceWorker.register</code> 返回当前活跃的 service worker 注册对象。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一旦浏览器注册了一个 service worker，那么 <strong>安装</strong> 工作将会开始，只要 service worker 被浏览器认为是新的，即当前站点没有安装过 service worker，或新旧 service worker 之间有任何一字节的不同。</p><p>安装一个 service worker 会触发 <code>install</code> 事件。在 service worker 安装过程中可以通过 <code>install</code> 的事件监听器来开展一些额外的工作。例如，在安装过程中，service worker 可以预缓存 web app 的一部分内容，从而在用户下次打开的时候可以快速响应。所以在首次加载后，重复加载的资源的响应速度会很快，用户体验会变得更好。示例代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-worker.js</span></span><br><span class="line"><span class="comment">// Listen for install event, set callback</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Perform some task</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>一旦 service worker 成功安装，那么将进入 <strong>激活</strong> 阶段。如果有些页面是被旧的 service worker 控制，那么新的 service worker 会进入 <code>waiting</code> 状态。新的 service worker 只有等到没有页面被旧的 service worker 控制的时候才会被激活。这保证了任何时候只有一个版本的 service worker 在运行。</p><blockquote><p>注意：简单地刷新页面是不足以将控制权转交给新的 service worker，因为在卸载当前页面之前，新页面会被请求，所以任何时间内旧的 service worker 都在被使用中。</p></blockquote><p>当新 service worker 激活的时候，<code>activate</code> 事件会被触发。可以利用这个事件来清理过期的缓存。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service-worker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform some task</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>一旦激活，service worker 会控制其作用域下的所有页面，并且开始监听这些页面的事件。然而，在激活之前加载的页面将不会受新的 service worker 的控制。新的 service worker 只有在关闭或重启应用，或调用 <code>clients.claim()</code> 才能掌握控制权。在此之前，这些页面的请求都将不会被新的 service worker 拦截。这其实是一种方法来保证站点前后统一。</p><h1 id="service-worker-事件"><a href="#service-worker-事件" class="headerlink" title="service worker 事件"></a>service worker 事件</h1><p>service worker 是事件驱动的。安装和激活的时候会分别触发 <code>install</code> 和 <code>activate</code> 事件，此外还有其他事件 Service Worker 也能进行响应，比如 <code>fetch</code>、<code>push</code>、<code>sync</code> 和 <code>message</code> 等，其中 <code>message</code> 是 service worker 用来和其他脚本通信用的。</p><p>要想检查 service worker，可以在浏览器的开发者工具中查看。这个过程由于各浏览器的实现不同而可能有所差异。更多信息可查看<a href="https://developers.google.com/web/ilt/pwa/tools-for-pwa-developers/" target="_blank" rel="noopener">工具使用链接</a></p><h1 id="深入阅读"><a href="#深入阅读" class="headerlink" title="深入阅读"></a>深入阅读</h1><ul><li>service worker <a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/lifecycle" target="_blank" rel="noopener">生命周期的详细介绍</a></li><li>service worker <a href="https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/registration" target="_blank" rel="noopener">注册</a></li><li><a href="https://developers.google.com/web/ilt/pwa/lab-scripting-the-service-worker" target="_blank" rel="noopener">Create your own service worker</a></li><li><a href="https://developers.google.com/web/ilt/pwa/lab-offline-quickstart" target="_blank" rel="noopener">Take a blog site offline</a></li><li><a href="https://developers.google.com/web/ilt/pwa/lab-caching-files-with-service-worker" target="_blank" rel="noopener">Cache files with Service Worker</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/ilt/pwa/introduction-to-service-worker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是-service-worker&quot;&gt;&lt;a href=&quot;#什么是-service-worker&quot; class=&quot;headerlink&quot; title=&quot;什么是 service worker&quot;&gt;&lt;/a&gt;什么是 service worker&lt;/h1&gt;&lt;p&gt;service worker 是 web worker 的一种。它本质上是一个 javaScript 文件独立运行于浏览器主线程之外，可以拦截网络请求，可以在缓存中缓存或取回资源，还可以分发推送消息。&lt;/p&gt;
&lt;p&gt;因为 workers 独立运行于主线程之外，所以 service workers 和与它相关联的应用是互相独立的。因此有如下结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为 service worker 不是同步的（它被设计成异步的），所以 &lt;code&gt;localStorage&lt;/code&gt; 在 service worker 中不能被使用。&lt;/li&gt;
&lt;li&gt;service worker 可以在 app 不是活跃状态下接收来自服务器的推送消息。这个特性甚至可以让你的 app 在没有被浏览器打开的情况下，向用户展示推送通知。&lt;/li&gt;
&lt;li&gt;service worker 不能直接接触 DOM。如果需要和页面进行通信，那么 service worker 可以使用 &lt;code&gt;postMessage()&lt;/code&gt; 来发送数据，另外通过监听 “message” 事件来接收数据。
    
    </summary>
    
      <category term="translation" scheme="https://craig00.github.io/categories/translation/"/>
    
    
      <category term="translation" scheme="https://craig00.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>algorithm---3</title>
    <link href="https://craig00.github.io/2017/07/06/algorithm3/"/>
    <id>https://craig00.github.io/2017/07/06/algorithm3/</id>
    <published>2017-07-06T15:10:51.000Z</published>
    <updated>2018-09-30T08:51:14.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串的字典序全排列"><a href="#字符串的字典序全排列" class="headerlink" title="字符串的字典序全排列"></a>字符串的字典序全排列</h3><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。 （可能有字符重复）</p><p>Array.sort方法重新理解：传入的比较函数有点纯函数的意味—compareFunction(a, b) must always return the same value when given a specific pair of elements a and b as its two arguments.</p><p>另外sort是根据返回的结果result进行排序，如果result&lt;0，就升序，result&gt;0，就降序，result==0就按默认的规则排序。</p><p>所以这一题的思路没什么特殊，就是取全排列然后再排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Permutation</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!str) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = str.split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">let</span> cc = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="comment">// arr.sort((a,b)=&gt; a.charCodeAt(0) - b.charCodeAt(0));</span></span><br><span class="line">    recurse(cc, arr, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> [...cc].sort();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recurse</span>(<span class="params">cc, arr, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == arr.length) &#123;</span><br><span class="line">        cc.add(arr.join(<span class="string">""</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = num; i &lt; arr.length; i++) &#123;</span><br><span class="line">        [arr[i], arr[num]] = [arr[num], arr[i]];</span><br><span class="line">        recurse(cc, arr, num + <span class="number">1</span>);</span><br><span class="line">        [arr[i], arr[num]] = [arr[num], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大子段和问题"><a href="#最大子段和问题" class="headerlink" title="最大子段和问题"></a>最大子段和问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum, a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            a = a + arr[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum === <span class="literal">undefined</span>) &#123;<span class="comment">//原来初始化为0，没有考虑开始就是负数的情况。牛客的test case只过了83%</span></span><br><span class="line">            sum = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; sum) &#123;</span><br><span class="line">            sum = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字符串的字典序全排列&quot;&gt;&lt;a href=&quot;#字符串的字典序全排列&quot; class=&quot;headerlink&quot; title=&quot;字符串的字典序全排列&quot;&gt;&lt;/a&gt;字符串的字典序全排列&lt;/h3&gt;&lt;p&gt;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc
      
    
    </summary>
    
      <category term="algorithm" scheme="https://craig00.github.io/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://craig00.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>algorithm---2</title>
    <link href="https://craig00.github.io/2017/06/27/algorithm2/"/>
    <id>https://craig00.github.io/2017/06/27/algorithm2/</id>
    <published>2017-06-27T06:32:51.000Z</published>
    <updated>2018-09-30T08:51:14.253Z</updated>
    
    <content type="html"><![CDATA[<h4 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h4><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p><p>题目里的特殊指针指向的任意节点，依然是这条链上的节点。这一点居然没搞明白！</p><p>所以思路就是先把所有节点复制一遍，并插入源节点之后，形成链表，然后处理random节点（需要结合前面说的），最后拆分一下，拆出一条也是OK滴。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*function RandomListNode(x)&#123;</span></span><br><span class="line"><span class="comment">    this.label = x;</span></span><br><span class="line"><span class="comment">    this.next = null;</span></span><br><span class="line"><span class="comment">    this.random = null;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Clone</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!pHead) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> current = pHead;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> RandomListNode(current.label);</span><br><span class="line">        node.next = current.next;</span><br><span class="line">        current.next = node;</span><br><span class="line">        current = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    current = pHead;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        node = current.next;</span><br><span class="line">        <span class="keyword">if</span> (current.random) &#123;</span><br><span class="line">            node.random = current.random.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> copyHead = pHead.next;</span><br><span class="line">    <span class="keyword">let</span> temp;</span><br><span class="line">    current = pHead;</span><br><span class="line">    <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">        temp = current.next;</span><br><span class="line">        current.next = temp.next;</span><br><span class="line">        current = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copyHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h4><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><p>核心思路是利用中序遍历，中序遍历正好符合排序要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* function TreeNode(x) &#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.left = null;</span></span><br><span class="line"><span class="comment">    this.right = null;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">//非递归版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(!pRootOfTree) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> pre;</span><br><span class="line">    <span class="keyword">let</span> node = pRootOfTree;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> root;</span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span> || stack.length != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> pop = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">0</span>) &#123;</span><br><span class="line">            start++;</span><br><span class="line">            root = pop;</span><br><span class="line">            pre = pop;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pre.right = pop;</span><br><span class="line">            pop.left = pre;</span><br><span class="line">            pre = pop;</span><br><span class="line">        &#125;</span><br><span class="line">        node = pop.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!pRootOfTree) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//不依靠外部变量</span></span><br><span class="line">    <span class="keyword">if</span> (pRootOfTree.left == <span class="literal">null</span> &amp;&amp; pRootOfTree.right == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> pRootOfTree;</span><br><span class="line">    <span class="keyword">let</span> left = Convert(pRootOfTree.left); <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">let</span> p = left;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p.right != <span class="literal">null</span>) &#123;<span class="comment">//取到左子树的最大值</span></span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">        p.right = pRootOfTree;</span><br><span class="line">        pRootOfTree.left = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> right = Convert(pRootOfTree.right);</span><br><span class="line">    <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">        right.left = pRootOfTree;</span><br><span class="line">        pRootOfTree.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left != <span class="literal">null</span> ? left : pRootOfTree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单递归版</span></span><br><span class="line"><span class="comment">//依赖外部变量</span></span><br><span class="line"><span class="keyword">let</span> leftN = <span class="literal">null</span>,rightN = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (!pRootOfTree) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    Convert(pRootOfTree.left);</span><br><span class="line">    <span class="keyword">if</span> (rightN == <span class="literal">null</span>) &#123;</span><br><span class="line">        leftN = rightN = pRootOfTree;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rightN.right = pRootOfTree;</span><br><span class="line">        pRootOfTree.left = rightN;</span><br><span class="line">        rightN = pRootOfTree;</span><br><span class="line">    &#125;</span><br><span class="line">    Convert(pRootOfTree.right);</span><br><span class="line">    <span class="keyword">return</span> leftN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;复杂链表的复制&quot;&gt;&lt;a href=&quot;#复杂链表的复制&quot; class=&quot;headerlink&quot; title=&quot;复杂链表的复制&quot;&gt;&lt;/a&gt;复杂链表的复制&lt;/h4&gt;&lt;p&gt;输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节
      
    
    </summary>
    
      <category term="algorithm" scheme="https://craig00.github.io/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://craig00.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>algorithm---1</title>
    <link href="https://craig00.github.io/2017/05/07/algorithm/"/>
    <id>https://craig00.github.io/2017/05/07/algorithm/</id>
    <published>2017-05-07T07:32:51.000Z</published>
    <updated>2018-09-30T08:51:14.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主定理（MasterTheorem）"><a href="#主定理（MasterTheorem）" class="headerlink" title="主定理（MasterTheorem）"></a>主定理（MasterTheorem）</h3><p>设a≥1，b&gt;1为常数，f(n) 为函数，T(n) 为非负整数，且T(n) = aT(n/b) + f(n) 则有以下结果：<br><img src="http://omoi0oliz.bkt.clouddn.com/algorithm.png" alt="主定理"></p><h3 id="找出n个数中第K大的数"><a href="#找出n个数中第K大的数" class="headerlink" title="找出n个数中第K大的数"></a>找出n个数中第K大的数</h3><p>采用类似快速排序算法的思想求解，从数组中随机选择一个数x，将数组分为两部分，一部分都小于x，另一部分都大于等于x.这个数x所在的位置正好是n-K的话，则返回这个数x，不然就继续找。</p><p>以下是java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> re = findHelp(a, i, j);</span><br><span class="line">        <span class="keyword">int</span> temp = a[re];</span><br><span class="line">        a[re] = a[i];</span><br><span class="line">        a[i] = temp;</span><br><span class="line">        <span class="keyword">while</span> ((n - re) != K) &#123;</span><br><span class="line">            <span class="keyword">if</span> (K &gt; (n - re)) &#123;</span><br><span class="line">                j = re - <span class="number">1</span>;</span><br><span class="line">                re = findHelp(a, i, j);</span><br><span class="line">                temp = a[re];</span><br><span class="line">                a[re] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = re + <span class="number">1</span>;</span><br><span class="line">                re = findHelp(a, i, j);</span><br><span class="line">                temp = a[re];</span><br><span class="line">                a[re] = a[i];</span><br><span class="line">                a[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a[re];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findHelp</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">return</span> j;</span><br><span class="line">        <span class="keyword">int</span> cc = a[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt; cc) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= cc) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是javascript代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findKth</span>(<span class="params">array, K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = array.length;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">    j = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> re = findHelp(array, i, j);</span><br><span class="line">  [array[i], array[re]] = [array[re], array[i]];</span><br><span class="line">  <span class="keyword">while</span> ((n - re) != K) &#123;</span><br><span class="line">    <span class="keyword">if</span> (K &gt; (n - re)) &#123;</span><br><span class="line">      j = re - <span class="number">1</span>;</span><br><span class="line">      re = findHelp(array, i, j);</span><br><span class="line">      [array[i], array[re]] = [array[re], array[i]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i = re + <span class="number">1</span>;</span><br><span class="line">      re = findHelp(array, i, j);</span><br><span class="line">      [array[i], array[re]] = [array[re], array[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array[re];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findHelp</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= j) <span class="keyword">return</span> j;</span><br><span class="line">    <span class="keyword">let</span> cc = arr[i];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; cc) &#123;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= cc) &#123;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>根据这个算法的过程可以得到如下等式</p><blockquote><p>T(n) = T(n/2) + O(n)</p></blockquote><p>根据主定理可知，T(n) = O(n).</p><p>同样也可以利用堆排序来做，虽然时间复杂度会是O(nlogK);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找出第K大的数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findKth</span>(<span class="params">array, K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cc = array.slice(<span class="number">0</span>, K);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排成一个小顶堆,这里是自底向上</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">parseInt</span>((cc.length - <span class="number">2</span>) / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        adjustHeap(cc, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = K; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; cc[<span class="number">0</span>]) &#123;</span><br><span class="line">            cc[<span class="number">0</span>] = array[i];</span><br><span class="line">            adjustHeap(cc, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(cc[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整堆，从上往下</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">adjustHeap</span>(<span class="params">arr, j</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = j; i &lt;= <span class="built_in">parseInt</span>((arr.length - <span class="number">2</span>) / <span class="number">2</span>); i = min) &#123;</span><br><span class="line">            min = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[<span class="number">2</span> * i + <span class="number">2</span>] &amp;&amp; arr[<span class="number">2</span> * i + <span class="number">2</span>] &lt; arr[<span class="number">2</span> * i + <span class="number">1</span>]) &#123;</span><br><span class="line">                min = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[min]) &#123;</span><br><span class="line">                [arr[i], arr[min]] = [arr[min], arr[i]];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主定理（MasterTheorem）&quot;&gt;&lt;a href=&quot;#主定理（MasterTheorem）&quot; class=&quot;headerlink&quot; title=&quot;主定理（MasterTheorem）&quot;&gt;&lt;/a&gt;主定理（MasterTheorem）&lt;/h3&gt;&lt;p&gt;设a≥1，b
      
    
    </summary>
    
      <category term="algorithm" scheme="https://craig00.github.io/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://craig00.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>闭包和匿名函数</title>
    <link href="https://craig00.github.io/2017/04/26/%E9%97%AD%E5%8C%85%E5%92%8C%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>https://craig00.github.io/2017/04/26/闭包和匿名函数/</id>
    <published>2017-04-26T15:16:58.000Z</published>
    <updated>2018-09-30T08:51:14.254Z</updated>
    
    <content type="html"><![CDATA[<p>匿名函数和闭包在js中是不一样的，匿名函数一般是没有名字的函数，而闭包是指有权访问另一个函数作用域中的变量的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counting=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoPlus</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">        <span class="built_in">console</span>.log(count++);   </span><br><span class="line">    &#125;   </span><br><span class="line"><span class="keyword">return</span> autoPlus;   </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上述代码是一个典型的闭包，但是js中作用域链是这样的：内层函数中的变量没有声明，那么它就会沿着作用域链一级一级向上搜索变量名，直至全局变量window对象定义的变量，所以这里autoPlus函数能够访问外层函数的count变量并不是因为闭包。</p><p>而闭包的特点在于它引用了外部函数的变量，则外部函数的变量就不会被销毁，直到闭包被销毁。一般匿名函数执行后，其内包含的变量和作用域链都是会被销毁的，但是如上述代码，count就没有被销毁。</p><p>深入浅出node中指出，实现外部作用域访问内部作用域中变量的方法叫做闭包，这得益于高阶函数的特性：函数可以作为参数或者返回值。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> local = <span class="string">'local'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> local;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> baz = bar();</span><br><span class="line">  <span class="built_in">console</span>.log(baz());</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">//local</span></span><br></pre></td></tr></table></figure><p>this 对象是在运行时基于函数的执行环境绑定的：在全局函数中， this 等于 window，而当函数被作为某个对象的方法调用时， this 等于那个对象。不过，匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。</p><pre><code class="javascript"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;<span class="keyword">var</span> object = {    name : <span class="string">"My Object"</span>,    getNameFunc : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{            <span class="keyword">return</span> <span class="keyword">this</span>.name;        };    }};</code></pre><pre><code class="javascript">alert(object.getNameFunc()()); <span class="comment">//"The Window"（在非严格模式下）</span><span class="keyword">var</span> name = <span class="string">"The Window"</span>;<span class="keyword">var</span> object = {    name : <span class="string">"My Object"</span>,    getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{        <span class="keyword">return</span> <span class="keyword">this</span>.name;    }};object.getName(); <span class="comment">//"My Object"</span>(object.getName)(); <span class="comment">//"My Object"</span>(object.getName = object.getName)(); <span class="comment">//"The Window"，在非严格模式下</span><span class="comment">//第三行代码先执行了一条赋值语句，然后再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以 this 的值不能得到维持，结果就返回了"The Window"。</span></code></pre><pre><code class="javascript"><span class="keyword">var</span> a = {  print: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  }}a.print() <span class="comment">// this is a because a is to the left of the dot</span><span class="keyword">var</span> b = a.print;b() <span class="comment">// this is window, because there is nothing to the left of the dot</span></code></pre><p>匿名函数中的this为什么会指向全局对象呢？其实就是嵌套太多（匿名函数中return匿名函数），或者类似于上面的例子（把匿名函数通过赋值的方式赋给了全局对象），所以到最后把匿名函数的执行环境给了全局对象。</p><p>而箭头函数的this总是指向词法作用域，也就是外层调用者obj，不会有上述问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;匿名函数和闭包在js中是不一样的，匿名函数一般是没有名字的函数，而闭包是指有权访问另一个函数作用域中的变量的函数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="javascript" scheme="https://craig00.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://craig00.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://craig00.github.io/2017/02/28/hello-world/"/>
    <id>https://craig00.github.io/2017/02/28/hello-world/</id>
    <published>2017-02-28T02:16:58.000Z</published>
    <updated>2018-09-30T08:51:14.254Z</updated>
    
    <content type="html"><![CDATA[<p>用hexo在github上搭建个人博客，本来挺简单，但是不动手试试就永远不知道自己到底会在什么地方犯糊涂。</p><h3 id="安装nodejs和git"><a href="#安装nodejs和git" class="headerlink" title="安装nodejs和git"></a>安装nodejs和git</h3><p>上官网下载最新版，配置一下环境变量即可。（程序员基本技能）<br>在github官网上创建一个repository，名称比较特殊，必须是yourname.github.io不然就会失败。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>打开git bash，在合适的文件夹目录中执行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>在浏览器上成功访问localhost:4000的话，那就说明hexo安装成功了。然而我就碰到了一个问题，浏览器一直在转圈圈，没有任何页面显示。这个问题是因为电脑上装了福昕阅读器，端口冲突了。设置其他端口进行访问即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 4001</span><br></pre></td></tr></table></figure></p><h3 id="更换hexo主题"><a href="#更换hexo主题" class="headerlink" title="更换hexo主题"></a>更换hexo主题</h3><p>都说next主题好看，所以跟风尝试了下。首先去github下载对应的主题包，直接git命令行下载实在太慢了，解压缩后放到themes文件夹内，修改文件名为next。在blog_config.yml中找到‘theme’，更改其值为next。这个文件的格式要求很严厉，好像不能随便缩进，而且键值对中间的冒号后面必须跟着空格。以下命令是清除静态资源，重新生成静态资源，启动服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><h3 id="部署hexo发布到github"><a href="#部署hexo发布到github" class="headerlink" title="部署hexo发布到github"></a>部署hexo发布到github</h3><p>首先可以是同步代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git init  </span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"init"</span> </span><br><span class="line">$ git remote add origin 项目的github地址 </span><br><span class="line">$ git pull origin master  </span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></p><p>在blog_config.yml中找到deploy，增加一点内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/craig00/craig00.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后下载安装一个扩展，执行hexo d命令即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用hexo在github上搭建个人博客，本来挺简单，但是不动手试试就永远不知道自己到底会在什么地方犯糊涂。&lt;/p&gt;
&lt;h3 id=&quot;安装nodejs和git&quot;&gt;&lt;a href=&quot;#安装nodejs和git&quot; class=&quot;headerlink&quot; title=&quot;安装nodej
      
    
    </summary>
    
      <category term="hexo" scheme="https://craig00.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://craig00.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
